// Import the required functions from Redux Toolkit and Axios for making HTTP requests
import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';
import axios from 'axios';

// Define an asynchronous thunk for user login
export const userLogin = createAsyncThunk(
  'user/login',
  async (user, { getState, rejectWithValue }) => {
    // Access the current state of the user slice to check if the user is already logged in
    const isAuthenticated = getState().User.isAuthenticated;
    if (isAuthenticated) {
      // If already logged in, reject the action with a value indicating the user is already logged in
      return rejectWithValue({
        package: 'You are already logged in, good sir.',
      });
    }
    try {
      // Attempt to login by sending a POST request with the user credentials
      const response = await axios.post('/api/user/login', user);
      // On success, return the response data to be handled by the fulfilled case
      return response.data;
    } catch (err) {
      // If the request fails, reject the action with the error message from the server
      return rejectWithValue(err.response.data);
    }
  }
);

export const userStatus = createAsyncThunk(
  'user/status',
  async (_, { getState, rejectWithValue }) => {
    const isAuthenticated = getState().User.isAuthenticated;
    if (isAuthenticated) {
      // If already logged in, reject the action with a value indicating the user is already logged in
      return rejectWithValue({
        package: 'You are already logged in, good sir.',
      });
    }
    try {
      const response = await axios.get('/api/user/status');
      console.log(1, response.data);
      return response.data;
    } catch (err) {
      console.log(2, err);
      return rejectWithValue(err.response.data);
    }
  }
);

export const userLogout = createAsyncThunk(
  'user/logout',
  async (_, { rejectWithValue }) => {
    try {
      const response = await axios.delete('api/user/logout');
      return response.data;
    } catch (err) {
      return rejectWithValue(err.response.data);
    }
  }
);

const handleUserFulfilled = (state, action) => {
  // Handle a successful login attempt
  state.isAuthenticated = true; // Update authentication status
  state.user.username = action.payload.package.username; // Set the username from the payload
};

const handleUserRejected = (state, action) => {
  // Handle a failed login attempt
  state.user.error = action.payload.package; // Set the error message from the payload
};

// Create a slice for user state with initial state, reducers, and extra reducers for handling async actions
export const userSlice = createSlice({
  name: 'user',
  initialState: {
    isAuthenticated: false,
    user: {
      username: null,
      error: null,
    },
  },
  reducers: {},
  extraReducers: (builder) => {
    builder
      .addCase(userLogin.fulfilled, handleUserFulfilled)
      .addCase(userLogin.rejected, handleUserRejected)
      .addCase(userStatus.fulfilled, handleUserFulfilled)
      .addCase(userStatus.rejected, handleUserRejected)
      .addCase(userLogout.fulfilled, (state) => {
        state.isAuthenticated = false;
        state.user.username = null;
      })
      .addCase(userLogout.rejected, (state, action) => {
        state.user.error = action.payload.package;
      });
  },
});

// Export the reducer function generated by the slice
export default userSlice.reducer;
